{"version":3,"file":"static/js/50.fb621f9b.chunk.js","mappings":"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","sources":["components/Camera.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport Tesseract from 'tesseract.js';\nimport { Stage, Layer, Rect } from 'react-konva';\nimport { useNavigate } from 'react-router-dom';\n\nfunction ReceiptEditor() {\n  const [capturedImage, setCapturedImage] = useState(null);\n  const [extractedText, setExtractedText] = useState('');\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [annotations, setAnnotations] = useState([]);\n  const [newAnnotation, setNewAnnotation] = useState(null);\n  const [restaurant, setRestaurant] = useState('');\n  const [amount, setAmount] = useState('');\n  const [friends, setFriends] = useState('');\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n  const streamRef = useRef(null);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (!capturedImage) {\n      startCamera();\n    }\n  }, [capturedImage]);\n\n  // Function to start the camera\n  const startCamera = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ video: true });\n      streamRef.current = stream; // Keep track of the stream for stopping later\n      if (videoRef.current) {\n        videoRef.current.srcObject = stream;\n      }\n    } catch (error) {\n      console.error('Error accessing the camera: ', error);\n    }\n  };\n\n  // Function to stop the camera\n  const stopCamera = () => {\n    if (streamRef.current) {\n      streamRef.current.getTracks().forEach(track => track.stop());\n    }\n  };\n\n  // Capture an image from the video feed\n  const handleCapture = () => {\n    if (canvasRef.current && videoRef.current) {\n      const context = canvasRef.current.getContext('2d');\n      canvasRef.current.width = videoRef.current.videoWidth;\n      canvasRef.current.height = videoRef.current.videoHeight;\n      context.drawImage(videoRef.current, 0, 0, videoRef.current.videoWidth, videoRef.current.videoHeight);\n      const imageData = canvasRef.current.toDataURL('image/png');\n      setCapturedImage(imageData);\n      stopCamera(); // Stop the camera after capturing\n      handleOCR(imageData); // Perform OCR on the captured image\n    }\n  };\n\n  // Perform OCR on the captured image\n  const handleOCR = (image) => {\n    setIsProcessing(true);\n    Tesseract.recognize(\n      image,\n      'eng',\n      {\n        logger: (m) => console.log(m) // Log progress if needed\n      }\n    )\n      .then(({ data: { text } }) => {\n        setExtractedText(text);\n        setIsProcessing(false);\n      })\n      .catch((error) => {\n        console.error('Error during OCR: ', error);\n        setIsProcessing(false);\n      });\n  };\n\n  // Reset the captured image to retake\n  const handleRetake = () => {\n    setCapturedImage(null);\n    setExtractedText('');\n    setAnnotations([]);\n  };\n\n  // Add annotation\n  const handleMouseDown = (e) => {\n    const { offsetX, offsetY } = e.evt;\n    setNewAnnotation({ x: offsetX, y: offsetY, width: 0, height: 0 });\n  };\n\n  const handleMouseMove = (e) => {\n    if (newAnnotation) {\n      const { offsetX, offsetY } = e.evt;\n      setNewAnnotation((prev) => ({\n        ...prev,\n        width: offsetX - prev.x,\n        height: offsetY - prev.y\n      }));\n    }\n  };\n\n  const handleMouseUp = () => {\n    if (newAnnotation) {\n      setAnnotations((prev) => [...prev, newAnnotation]);\n      setNewAnnotation(null);\n    }\n  };\n\n  // Save receipt and navigate to Bills page\n  const handleSaveReceipt = () => {\n    const newReceipt = {\n      id: Date.now(),\n      date: new Date().toISOString().split('T')[0],\n      restaurant: restaurant || 'Unknown',\n      amount: parseFloat(amount) || 0,\n      friends: friends ? friends.split(',').map(f => f.trim()) : [],\n      status: 'Unpaid',\n      image: capturedImage,\n      annotations: annotations,\n      extractedText: extractedText,\n    };\n\n    // Save the new receipt to local storage\n    const storedReceipts = JSON.parse(localStorage.getItem('receipts')) || [];\n    storedReceipts.push(newReceipt);\n    localStorage.setItem('receipts', JSON.stringify(storedReceipts));\n\n    // Navigate to the Bills page\n    navigate('/bills');\n  };\n\n  return (\n    <div className=\"receipt-editor\" style={{ maxHeight: '100vh', overflowY: 'auto', paddingBottom: '100px' }}>\n      <h2>Scan Receipt</h2>\n      {!capturedImage ? (\n        <div className=\"camera-feed\">\n          <video ref={videoRef} autoPlay className=\"camera-video\" />\n          <button onClick={handleCapture} className=\"capture-button\">\n            Capture Receipt\n          </button>\n        </div>\n      ) : (\n        <div className=\"captured-image-container\">\n          <h3>Captured Image</h3>\n          <img src={capturedImage} alt=\"Captured Receipt\" className=\"captured-image\" />\n          <button onClick={handleRetake} className=\"retake-button\">\n            Retake\n          </button>\n          {isProcessing ? (\n            <p>Processing the image, please wait...</p>\n          ) : (\n            <div className=\"extracted-text\">\n              <h3>Extracted Receipt:</h3>\n              <pre>{extractedText}</pre>\n            </div>\n          )}\n          <Stage\n            width={500}\n            height={500}\n            onMouseDown={handleMouseDown}\n            onMouseMove={handleMouseMove}\n            onMouseUp={handleMouseUp}\n          >\n            <Layer>\n              {annotations.map((annotation, index) => (\n                <Rect\n                  key={index}\n                  x={annotation.x}\n                  y={annotation.y}\n                  width={annotation.width}\n                  height={annotation.height}\n                  stroke=\"red\"\n                />\n              ))}\n              {newAnnotation && (\n                <Rect\n                  x={newAnnotation.x}\n                  y={newAnnotation.y}\n                  width={newAnnotation.width}\n                  height={newAnnotation.height}\n                  stroke=\"blue\"\n                />\n              )}\n            </Layer>\n          </Stage>\n          <div className=\"receipt-details-form\">\n            <h3>Receipt Details</h3>\n            <label>\n              Restaurant:\n              <input type=\"text\" value={restaurant} onChange={(e) => setRestaurant(e.target.value)} />\n            </label>\n            <label>\n              Amount:\n              <input type=\"number\" value={amount} onChange={(e) => setAmount(e.target.value)} />\n            </label>\n            <label>\n              Friends (comma-separated):\n              <input type=\"text\" value={friends} onChange={(e) => setFriends(e.target.value)} />\n            </label>\n          </div>\n          <button onClick={handleSaveReceipt} className=\"save-receipt-button\" style={{ marginTop: '20px' }}>\n            Save Receipt\n          </button>\n        </div>\n      )}\n      <canvas ref={canvasRef} style={{ display: 'none' }} />\n    </div>\n  );\n}\n\nexport default ReceiptEditor;\n"],"names":["capturedImage","setCapturedImage","useState","extractedText","setExtractedText","isProcessing","setIsProcessing","annotations","setAnnotations","newAnnotation","setNewAnnotation","restaurant","setRestaurant","amount","setAmount","friends","setFriends","videoRef","useRef","canvasRef","streamRef","navigate","useNavigate","useEffect","startCamera","async","stream","navigator","mediaDevices","getUserMedia","video","current","srcObject","error","console","handleOCR","image","Tesseract","logger","m","log","then","_ref","data","text","catch","_jsxs","className","style","maxHeight","overflowY","paddingBottom","children","_jsx","src","alt","onClick","handleRetake","Stage","width","height","onMouseDown","e","offsetX","offsetY","evt","x","y","onMouseMove","prev","onMouseUp","handleMouseUp","Layer","map","annotation","index","Rect","stroke","type","value","onChange","target","handleSaveReceipt","newReceipt","id","Date","now","date","toISOString","split","parseFloat","f","trim","status","storedReceipts","JSON","parse","localStorage","getItem","push","setItem","stringify","marginTop","ref","autoPlay","handleCapture","context","getContext","videoWidth","videoHeight","drawImage","imageData","toDataURL","getTracks","forEach","track","stop","display"],"sourceRoot":""}