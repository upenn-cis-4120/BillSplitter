{"version":3,"file":"static/js/771.c733dbac.chunk.js","mappings":"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","sources":["components/Bills.jsx","components/Dashboard.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nfunction Bills({ filterLastMonths }) {\n  const [transactions, setTransactions] = useState([]);\n  const [sortOption, setSortOption] = useState('');\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    // Load receipts from local storage\n    const storedReceipts = JSON.parse(localStorage.getItem('receipts')) || [];\n    let filteredTransactions = storedReceipts;\n\n    if (filterLastMonths) {\n      const filterDate = new Date();\n      filterDate.setMonth(filterDate.getMonth() - filterLastMonths);\n\n      filteredTransactions = storedReceipts.filter(transaction => {\n        const transactionDate = new Date(transaction.date);\n        return transactionDate >= filterDate;\n      });\n    }\n\n    setTransactions(filteredTransactions.map((t) => ({ ...t, expanded: false })));\n  }, [filterLastMonths]);\n\n  // Sort transactions based on the selected option\n  const handleSort = (option) => {\n    setSortOption(option);\n\n    const sortedTransactions = [...transactions];\n\n    switch (option) {\n      case 'amount':\n        sortedTransactions.sort((a, b) => a.amount - b.amount);\n        break;\n      case 'date':\n        sortedTransactions.sort((a, b) => new Date(a.date) - new Date(b.date));\n        break;\n      case 'friends':\n        sortedTransactions.sort((a, b) => a.friends.join(', ').localeCompare(b.friends.join(', ')));\n        break;\n      case 'status':\n        sortedTransactions.sort((a, b) => a.status.localeCompare(b.status));\n        break;\n      default:\n        break;\n    }\n\n    setTransactions(sortedTransactions);\n  };\n\n  // Toggle expansion of transaction details\n  const toggleExpand = (id) => {\n    setTransactions(transactions.map(transaction =>\n      transaction.id === id\n        ? { ...transaction, expanded: !transaction.expanded }\n        : transaction\n    ));\n  };\n\n  // Mark a transaction as paid or unpaid\n  const togglePaidStatus = (id) => {\n    setTransactions(transactions.map(transaction =>\n      transaction.id === id\n        ? { ...transaction, status: transaction.status === 'Paid' ? 'Unpaid' : 'Paid' }\n        : transaction\n    ));\n\n    // Update local storage\n    const updatedTransactions = transactions.map(transaction =>\n      transaction.id === id\n        ? { ...transaction, status: transaction.status === 'Paid' ? 'Unpaid' : 'Paid' }\n        : transaction\n    );\n    localStorage.setItem('receipts', JSON.stringify(updatedTransactions));\n  };\n\n  // Send receipt to a friend (placeholder function)\n  const handleSendToFriend = (transaction) => {\n    alert(`Sending receipt for ${transaction.restaurant} to ${transaction.friends.join(', ')}`);\n  };\n\n  // Navigate to Receipt Editor to add details to a new receipt\n  const handleAddReceipt = () => {\n    navigate('/camera');\n  };\n\n  return (\n    <div className=\"bills-page\">\n      <h2>{filterLastMonths ? `Recent Transactions (Last ${filterLastMonths} Months)` : 'All Restaurant Transactions'}</h2>\n\n      {/* Sorting Dropdown */}\n      <div className=\"sort-options\">\n        <label htmlFor=\"sort\">Sort by: </label>\n        <select\n          id=\"sort\"\n          value={sortOption}\n          onChange={(e) => handleSort(e.target.value)}\n        >\n          <option value=\"\">Select</option>\n          <option value=\"amount\">Amount</option>\n          <option value=\"date\">Date</option>\n          <option value=\"friends\">Person</option>\n          <option value=\"status\">Status (Paid/Unpaid)</option>\n        </select>\n      </div>\n\n      <button onClick={handleAddReceipt} className=\"add-receipt-button\">\n        Add New Receipt\n      </button>\n\n      <div className=\"transactions-list\">\n        {transactions.length > 0 ? (\n          transactions.map((transaction) => (\n            <div key={transaction.id} className=\"transaction-item\">\n              <p onClick={() => toggleExpand(transaction.id)} style={{ cursor: 'pointer', fontWeight: 'bold' }}>\n                Date: {transaction.date}\n                {transaction.expanded ? ' ▲' : ' ▼'}\n              </p>\n              {transaction.expanded && (\n                <div className=\"transaction-details\">\n                  <p><strong>Restaurant:</strong> {transaction.restaurant}</p>\n                  <p><strong>Amount:</strong> ${transaction.amount.toFixed(2)}</p>\n                  <p><strong>Friends:</strong> {transaction.friends.join(', ')}</p>\n                  <p className={`status ${transaction.status.toLowerCase()}`}>\n                    <strong>Status:</strong> {transaction.status}\n                  </p>\n                  {transaction.image && (\n                    <div className=\"receipt-image\">\n                      <h4>Receipt Image:</h4>\n                      <img src={transaction.image} alt=\"Receipt\" style={{ maxWidth: '100%' }} />\n                    </div>\n                  )}\n                  <div className=\"transaction-actions\">\n                    <button onClick={() => togglePaidStatus(transaction.id)} className=\"toggle-paid-button\">\n                      Mark as {transaction.status === 'Paid' ? 'Unpaid' : 'Paid'}\n                    </button>\n                    <button onClick={() => handleSendToFriend(transaction)} className=\"send-friend-button\">\n                      Send to Friend\n                    </button>\n                  </div>\n                </div>\n              )}\n            </div>\n          ))\n        ) : (\n          <p>No transactions found for the last {filterLastMonths} months.</p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Bills;","// src/components/Dashboard.js\nimport React from 'react';\nimport Bills from './Bills';\n\nfunction Dashboard({ user, currentBalance }) {\n  return (\n    <div className=\"dashboard\">\n      <h2>Welcome, {user?.username}</h2>\n      \n      {/* Display Current Balance */}\n      <div className=\"balance-section\">\n        <h3>Current Balance: $937.64</h3>\n      </div>\n      \n      {/* Bills Section */}\n      <div>\n        <Bills filterLastMonths={2} />\n      </div>\n    </div>\n  );\n}\n\nexport default Dashboard;\n\n\n"],"names":["_ref","filterLastMonths","transactions","setTransactions","useState","sortOption","setSortOption","navigate","useNavigate","useEffect","storedReceipts","JSON","parse","localStorage","getItem","filteredTransactions","filterDate","Date","setMonth","getMonth","filter","transaction","date","map","t","expanded","_jsxs","className","children","_jsx","htmlFor","id","value","onChange","e","option","sortedTransactions","sort","a","b","amount","friends","join","localeCompare","status","handleSort","target","onClick","handleAddReceipt","length","toggleExpand","style","cursor","fontWeight","restaurant","toFixed","toLowerCase","image","src","alt","maxWidth","updatedTransactions","setItem","stringify","togglePaidStatus","alert","handleSendToFriend","user","currentBalance","username","Bills"],"sourceRoot":""}